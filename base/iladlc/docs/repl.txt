
{{alias}}( order, M, N, A, LDA )
    Returns the index of the last non-zero column in a matrix `A`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If provided an empty matrix or a matrix containing only zeros, the function
    returns `-1` (i.e., an invalid index).

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    Returns
    -------
    out: integer
        Zero-based index of the last non-zero column.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}( 'row-major', 2, 2, A, 2 )
    1


{{alias}}.ndarray( M, N, A, strideA1, strideA2, offsetA )
    Returns the index of the last non-zero column in a matrix `A` using
    alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    If provided an empty matrix or a matrix containing only zeros, the function
    returns `-1` (i.e., an invalid index).

    Parameters
    ----------
    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    strideA1: integer
        Stride of the first dimension of `A`.

    strideA2: integer
        Stride of the second dimension of `A`.

    offsetA: integer
        Starting index for `A`.

    Returns
    -------
    out: integer
        Zero-based index of the last non-zero column.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}.ndarray( 2, 2, A, 2, 1, 0 )
    1

    See Also
    --------
